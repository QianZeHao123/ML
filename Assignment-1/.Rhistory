HouseData = read.csv(file, header=TRUE)
View(HouseData)
test = house[-ind,c("price","bedrooms")]
test = HouseData[-ind,c("price","bedrooms")]
ind = [1,2,3]
ind = (1,2,3)
ind = 1
test = HouseData[-ind,c("price","bedrooms")]
View(test)
# ---------------------------------------------------------------------
# clear the environment var area
rm(list = ls())
# clear all plots
graphics.off()
# clear the console area
cat("\014")
# ---------------------------------------------------------------------
# current_directory
current_directory = getwd()
# read_csv
# joint file path
file_path = file.path(current_directory, "auto-mpg.csv")
autompg = read.csv(file_path, header=TRUE)
# ---------------------------------------------------------------------
# clear the environment var area
rm(list = ls())
# clear all plots
graphics.off()
# clear the console area
cat("\014")
# ---------------------------------------------------------------------
# current_directory
current_directory = getwd()
# read_csv
# joint file path
file = file.path(current_directory, "kc_house_data.csv")
HouseData = read.csv(file, header=TRUE)
HouseData =  subset(HouseData, select = c(id, price, bedrooms, bathrooms,
sqft_living, sqft_lot, floors,
yr_built, zipcode, lat, long))
dim(HouseData) #this should return 21613, 11
names(HouseData) #this should return id, price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, yr_built, zipcode, lat, lon
head(HouseData)
library(leaps)
#best_forward = NULL #Replace this with the relevant function call
summary(best_forward) #print the summary for the best_forward output
library(leaps)
best_forward = regsubsets(Price ~ ., data = HouseData, nbest = 1, method = "forward")
library(leaps)
best_forward = regsubsets(price ~ ., data = HouseData, nbest = 1, method = "forward")
#best_forward = NULL #Replace this with the relevant function call
summary(best_forward) #print the summary for the best_forward output
forward_summary = summary(best_forward) #save the summary to forward_summary
forward_adjr2 = which.max(forward_summary$adjr2) #choose the model with the maximum adjusted R2
print(coef(best_forward,forward_adjr2)) #print the coefficients for the model with the highest adj R2
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
library(leaps)
fit <- regsubsets(Price ~ ., data = house_data, nbest = 1, method = "forward")
library(leaps)
fit <- regsubsets(price ~ ., data = HouseData, nbest = 1, method = "forward")
fit.summary <- summary(fit)
bic_values <- fit.summary$bic
cp_values <- fit.summary$cp
adjr2_values <- fit.summary$adjr2
bic_values
bic_values
adjr2_values
View(fit.summary)
cp_values
#save the summary to forward_summary
forward_summary = summary(best_forward)
#choose the model with the maximum adjusted R2
forward_adjr2 = which.max(forward_summary$adjr2)
#print the coefficients for the model with the highest adj R2
print(coef(best_forward,forward_adjr2))
forward_cp = which.max(forward_summary$cp)
print(coef(best_forward,forward_cp))
forward_bic = which.max(forward_summary$bic)
print(coef(best_forward,forward_bic))
forward_cp = which.min(forward_summary$cp)
print(coef(best_forward,forward_cp))
forward_bic = which.min(forward_summary$bic)
print(coef(best_forward,forward_bic))
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
# ---------------------------------------------------------------------
# clear the environment var area
rm(list = ls())
# clear all plots
graphics.off()
# clear the console area
cat("\014")
# ---------------------------------------------------------------------
# current_directory
current_directory = getwd()
# read_csv
# joint file path
file = file.path(current_directory, "kc_house_data.csv")
HouseData = read.csv(file, header=TRUE)
HouseData =  subset(HouseData, select = c(id, price, bedrooms, bathrooms,
sqft_living, sqft_lot, floors,
yr_built, zipcode, lat, long))
dim(HouseData) #this should return 21613, 11
names(HouseData) #this should return id, price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, yr_built, zipcode, lat, lon
head(HouseData)
library(leaps)
best_forward = regsubsets(price ~ ., data = HouseData, nbest = 1, method = "forward")
#best_forward = NULL #Replace this with the relevant function call
summary(best_forward) #print the summary for the best_forward output
#save the summary to forward_summary
forward_summary = summary(best_forward)
#choose the model with the maximum adjusted R2
forward_adjr2 = which.max(forward_summary$adjr2)
#print the coefficients for the model with the highest adj R2
print(coef(best_forward,forward_adjr2))
forward_cp = which.min(forward_summary$cp)
print(coef(best_forward,forward_cp))
forward_bic = which.min(forward_summary$bic)
print(coef(best_forward,forward_bic))
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
?regsubsets
# ---------------------------------------------------------------------
# clear the environment var area
rm(list = ls())
# clear all plots
graphics.off()
# clear the console area
cat("\014")
# ---------------------------------------------------------------------
# current_directory
current_directory = getwd()
# read_csv
# joint file path
file = file.path(current_directory, "kc_house_data.csv")
HouseData = read.csv(file, header=TRUE)
HouseData =  subset(HouseData, select = c(id, price, bedrooms, bathrooms,
sqft_living, sqft_lot, floors,
yr_built, zipcode, lat, long))
dim(HouseData) #this should return 21613, 11
names(HouseData) #this should return id, price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, yr_built, zipcode, lat, lon
head(HouseData)
library(leaps)
best_forward = regsubsets(price ~ ., data = HouseData, nbest = 1, method = "forward", nvmax = 10)
#print the summary for the best_forward output
summary(best_forward)
#save the summary to forward_summary
forward_summary = summary(best_forward)
#choose the model with the maximum adjusted R2
forward_adjr2 = which.max(forward_summary$adjr2)
#print the coefficients for the model with the highest adj R2
print(coef(best_forward,forward_adjr2))
forward_cp = which.min(forward_summary$cp)
print(coef(best_forward,forward_cp))
forward_bic = which.min(forward_summary$bic)
print(coef(best_forward,forward_bic))
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
bic_min = which.min(forward_summary$bic)
#overlay the minimum of cp on the previous plot using the points function
points(bic_min,
forward_summary$bic[bic_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
bic_min = which.min(forward_summary$bic)
#overlay the minimum of cp on the previous plot using the points function
points(bic_min,
forward_summary$bic[bic_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
plot(forward_summary$adjr2,
xlab = "# Predictors", #x-axis label
ylab = "AdjR2", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
bic_min = which.min(forward_summary$bic)
points(bic_min,
forward_summary$bic[bic_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
plot(forward_summary$adjr2,
xlab = "# Predictors", #x-axis label
ylab = "AdjR2", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
adjr2_min = which.min(forward_summary$adjr2)
points(bic_min,
forward_summary$adjr2[adjr2_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
bic_min = which.min(forward_summary$bic)
points(bic_min,
forward_summary$bic[bic_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
plot(forward_summary$adjr2,
xlab = "# Predictors", #x-axis label
ylab = "AdjR2", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
adjr2_min = which.min(forward_summary$adjr2)
points(adjr2_min,
forward_summary$adjr2[adjr2_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
bic_min = which.min(forward_summary$bic)
points(bic_min,
forward_summary$bic[bic_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
plot(forward_summary$adjr2,
xlab = "# Predictors", #x-axis label
ylab = "AdjR2", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
adjr2_max = which.min(forward_summary$adjr2)
points(adjr2_min,
forward_summary$adjr2[adjr2_max],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
bic_min = which.min(forward_summary$bic)
points(bic_min,
forward_summary$bic[bic_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
plot(forward_summary$adjr2,
xlab = "# Predictors", #x-axis label
ylab = "AdjR2", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
adjr2_max = which.max(forward_summary$adjr2)
points(adjr2_min,
forward_summary$adjr2[adjr2_max],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
par(mfrow = c(1,3)) # allows for 3 plots to be plotted side by side
plot(forward_summary$cp,
xlab = "# Predictors", #x-axis label
ylab = "Cp", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
cp_min = which.min(forward_summary$cp)
#overlay the minimum of cp on the previous plot using the points function
points(cp_min,
forward_summary$cp[cp_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
# ADD CODE HERE TO PLOT BIC AND ADJUSTED R^2
plot(forward_summary$bic,
xlab = "# Predictors", #x-axis label
ylab = "BIC", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
bic_min = which.min(forward_summary$bic)
points(bic_min,
forward_summary$bic[bic_min],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker
plot(forward_summary$adjr2,
xlab = "# Predictors", #x-axis label
ylab = "AdjR2", #y-axis label
type = "l", #line plot
lwd = 2) #line thickness
adjr2_max = which.max(forward_summary$adjr2)
points(adjr2_max,
forward_summary$adjr2[adjr2_max],
pch = 4, #cross symbol used
col = 2, #red colour
cex = 4, #make it bigger!
lwd = 2) #make the cross lines thicker

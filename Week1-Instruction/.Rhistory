nfolds=5)
plot(cv_fit)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
plot(cv_fit)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
plot(cv_fit)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
cv_fit$lambda.min
library(caret)
ctrl_kfold0 = trainControl(method = "cv", number = 10)
ridge_kfold0 = train(hp ~ mpg+drat+wt,
data = mtcars,
method = "glmnet",
metric = "RMSE",
thresh=1e-10,
tuneGrid = expand.grid(alpha = 0, lambda = 0),
trControl = ctrl_kfold0)
coef(ridge_kfold0$finalModel, ridge_kfold0$bestTune$lambda)
?train
lambdas=10^seq(-3,3,by=0.1)
ctrl_kfold = trainControl(method = "cv", number = 10)
ridge_kfold = train(hp ~ mpg+drat+wt,
data = mtcars,
method = "glmnet",
metric = "RMSE",
tuneGrid = expand.grid(alpha = 0,
lambda = lambdas),
trControl = ctrl_kfold,
thresh=1e-10)
coef(ridge_kfold$finalModel, ridge_kfold$bestTune$lambda)
print(ridge_kfold$finalModel$lambdaOpt)
prediction_ridge = predict(ridge_kfold,mtcars[,c("mpg","drat","wt")])
RMSE(prediction_ridge,mtcars$hp)
set.seed(115)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
set.seed(115)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
set.seed(115)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
set.seed(117)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
set.seed(117)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
set.seed(117)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
set.seed(117)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
set.seed(118)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
set.seed(118)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
# cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
# cv_fit$lambda.min
print("\n")
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
# cv_fit$lambda.min
print("\n")
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
print('------lm method------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------GLMnet method------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
print('------------lm method------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------GLMnet method------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(118)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(115)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(115)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(111)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
set.seed(111)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
# CARet method
print('------------------CARet method------------------')
# lambdas=10^seq(-3,3,by=0.1)
ctrl_kfold = trainControl(method = "cv", number = 10)
ridge_kfold = train(hp ~ mpg+drat+wt,
data = mtcars,
method = "glmnet",
metric = "RMSE",
tuneGrid = expand.grid(alpha = 0,
lambda = lambdas),
trControl = ctrl_kfold,
thresh=1e-10)
print(ridge_kfold$finalModel$lambdaOpt)
coef(ridge_kfold$finalModel, ridge_kfold$bestTune$lambda)
prediction_ridge = predict(ridge_kfold,mtcars[,c("mpg","drat","wt")])
RMSE(prediction_ridge,mtcars$hp)
set.seed(111)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
# CARet method
print('------------------CARet method------------------')
# lambdas=10^seq(-3,3,by=0.1)
ctrl_kfold = trainControl(method = "cv", number = 10)
ridge_kfold = train(hp ~ mpg+drat+wt,
data = mtcars,
method = "glmnet",
metric = "RMSE",
tuneGrid = expand.grid(alpha = 0,
lambda = lambdas),
trControl = ctrl_kfold,
thresh=1e-10)
print(ridge_kfold$finalModel$lambdaOpt)
coef(ridge_kfold$finalModel, ridge_kfold$bestTune$lambda)
prediction_ridge = predict(ridge_kfold,mtcars[,c("mpg","drat","wt")])
RMSE(prediction_ridge,mtcars$hp)
set.seed(111)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
set.seed(111)
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
# CARet method
set.seed(111)
print('------------------CARet method------------------')
# lambdas=10^seq(-3,3,by=0.1)
ctrl_kfold = trainControl(method = "cv", number = 10)
ridge_kfold = train(hp ~ mpg+drat+wt,
data = mtcars,
method = "glmnet",
metric = "RMSE",
tuneGrid = expand.grid(alpha = 0,
lambda = lambdas),
trControl = ctrl_kfold,
thresh=1e-10)
print(ridge_kfold$finalModel$lambdaOpt)
coef(ridge_kfold$finalModel, ridge_kfold$bestTune$lambda)
prediction_ridge = predict(ridge_kfold,mtcars[,c("mpg","drat","wt")])
RMSE(prediction_ridge,mtcars$hp)
set.seed(111)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
set.seed(111)
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=20,
thresh=1e-10)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
# CARet method
set.seed(111)
print('------------------CARet method------------------')
# lambdas=10^seq(-3,3,by=0.1)
ctrl_kfold = trainControl(method = "cv", number = 10)
ridge_kfold = train(hp ~ mpg+drat+wt,
data = mtcars,
method = "glmnet",
metric = "RMSE",
tuneGrid = expand.grid(alpha = 0,
lambda = lambdas),
trControl = ctrl_kfold,
thresh=1e-10)
print(ridge_kfold$finalModel$lambdaOpt)
coef(ridge_kfold$finalModel, ridge_kfold$bestTune$lambda)
prediction_ridge = predict(ridge_kfold,mtcars[,c("mpg","drat","wt")])
RMSE(prediction_ridge,mtcars$hp)
set.seed(111)
# lm method
print('------------------lm method------------------')
lm_model = lm(hp ~ mpg + drat + wt, data=mtcars)
coef(lm_model)
# glmnet
set.seed(111)
print('------------------GLMnet method------------------')
lambdas=10^seq(-3,3,by=0.1)
cv_fit = cv.glmnet(as.matrix(mtcars[,c("mpg","drat","wt")]),
as.matrix(mtcars$hp),
alpha=0,
lambda=lambdas,
nfolds=10,
thresh=1e-10)
cv_fit$lambda.min
coef(cv_fit, s="lambda.min")
predict_best_cv = predict(cv_fit, s="lambda.min",newx=as.matrix(mtcars[,c("mpg","drat","wt")]))
RMSE_best_cv = sqrt(mean((predict_best_cv-mtcars$hp)^2))
print(RMSE_best_cv)
# CARet method
set.seed(111)
print('------------------CARet method------------------')
# lambdas=10^seq(-3,3,by=0.1)
ctrl_kfold = trainControl(method = "cv", number = 10)
ridge_kfold = train(hp ~ mpg+drat+wt,
data = mtcars,
method = "glmnet",
metric = "RMSE",
tuneGrid = expand.grid(alpha = 0,
lambda = lambdas),
trControl = ctrl_kfold,
nfolds=10,
thresh=1e-10)
print(ridge_kfold$finalModel$lambdaOpt)
coef(ridge_kfold$finalModel, ridge_kfold$bestTune$lambda)
prediction_ridge = predict(ridge_kfold,mtcars[,c("mpg","drat","wt")])
RMSE(prediction_ridge,mtcars$hp)
